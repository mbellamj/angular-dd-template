name: $(BuildID)

trigger:
  branches:
    include:
      - main
      - feat/*
      - fix/*
  paths:
    exclude:
      - '**.vscode'
      - '**.md'

pr: none

variables:
  vmImageName: 'ubuntu-latest'
  npm_config_cache: $(Pipeline.Workspace)/.npm
  APP_NAME: ${{ variables['Build.Repository.Name'] }}
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  branchName: $[replace(variables['Build.SourceBranchName'], '/', '-')]
  targetFolder: $(Build.ArtifactStagingDirectory)/$(APP_NAME)/$(branchName)
  coverageSummaryFile: $(targetFolder)/code/coverage.xml
  testResultsFolder: $(targetFolder)/xml

pool:
  vmImage: $(vmImageName)

resources:
  repositories:
    - repository: templates
      type: git
      name: ava-templates

stages:
  - stage: CI
    displayName: CI ${{ variables['APP_NAME'] }} - Install, Lint and Test
    jobs:
      - job: CI
        strategy:
          matrix:
            # nodeVersion20:
            #   node.version: '20.1'
            nodeVersion21:
              node.version: '21.1'
        steps:
          - task: UseNode@1
            inputs:
              version: '$(node.version)'

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package*.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)
            displayName: Cache npm dependencies

          - script: npm ci --prefer-offline
            displayName: Install dependencies

          - script: npm run format
            displayName: Format files

          - script: npm run lint
            displayName: Validate, Lint files

          - script: npm run test:ci
            displayName: Run test

          - bash: |
              mkdir -p $(targetFolder)/code
              mkdir -p $(testResultsFolder)
              cp coverage/angular-ddd-template/code/cobertura-coverage.xml $(coverageSummaryFile)
              cp coverage/angular-ddd-template/xml/* $(testResultsFolder)
            displayName: Copy App ${{ variables['APP_NAME'] }} test results files

          - task: PublishCodeCoverageResults@2
            displayName: Publish App ${{ variables['APP_NAME'] }} code coverage
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: $(coverageSummaryFile)

          - task: PublishTestResults@2
            displayName: Publishing ${{ variables['APP_NAME'] }} tests results on Azure Test Plan
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: $(testResultsFolder)/*.xml
              mergeTestResults: true
              testRunTitle: $(APP_NAME)-$(branchName)

  - stage: CD
    displayName: CD ${{ variables['APP_NAME'] }} - Release, Build and Push
    condition: eq(variables.isMain, 'True')
    jobs:
      - job: Release
        displayName: Release new version for ${{ variables['APP_NAME'] }}
        variables:
          - template: pipeline/global-vars.yml@templates
          - name: node.version
            value: '21.1'
        steps:
          - checkout: self
            persistCredentials: true
            clean: true

          - task: UseNode@1
            inputs:
              version: '$(node.version)'

          - bash: |
              npm --version
              npm install --global semantic-release @semantic-release/git @semantic-release/changelog
              semantic-release --debug
            displayName: Release ${{ variables['APP_NAME'] }} version
            env:
              GIT_AUTHOR_NAME: $(GIT_USER_NAME)
              GIT_COMMITTER_NAME: $(GIT_USER_NAME)
              GIT_AUTHOR_EMAIL: $(GIT_USER_EMAIL)
              GIT_COMMITTER_EMAIL: $(GIT_USER_EMAIL)

      - job: BuildAndPush
        displayName: Build and push ${{ variables['APP_NAME'] }} to container registry
        dependsOn: Release
        variables:
          - group: docker-variables-group
          - template: pipeline/global-vars.yml@templates
        steps:
          - bash: |
              npm --version
              version=$(cat package.json | jq -r '.version')
              echo $version
              echo "##vso[task.setvariable variable=APP_VERSION]$version"
            displayName: Get latest ${{ variables['APP_NAME'] }} version

          - template: pipeline/steps/docker-build-and-push.steps.yml@templates
            parameters:
              name: $(DOCKER_REGISTRY_USERNAME)/$(APP_NAME)
              registryServiceConnection: $(DOCKER_CONTAINER_REGISTRY)
              dockerFile: Dockerfile
              tag: '$(APP_VERSION)'
